plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id "org.jetbrains.kotlin.kapt"
    id "de.mannodermaus.android-junit5"
    id 'org.jetbrains.dokka' version '1.5.0'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding true
    }
    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
    }
}

ext {
    spek_version = '2.0.15'
    strohm_native_version = '0.1.0-SNAPSHOT'
}

dependencies {
    def lifecycle_version = "2.3.1"
    def arch_version = "2.1.0"

    kapt "com.android.databinding:compiler:$lifecycle_version"

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.3")
    implementation 'com.google.code.gson:gson:2.8.6'
    debugImplementation 'com.android.volley:volley:1.2.1'

    implementation "androidx.security:security-crypto:1.1.0-alpha03"

    // Testing: JUnit5 and Spek
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")

    // spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spek_version"

    // spek requires kotlin-reflect, omit when already in classpath
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation 'org.json:json:20201115'
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

tasks.dokkaHtml.configure {
    outputDirectory.set(file(buildDir.absolutePath + File.separatorChar + "dokka"))
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifactId = 'strohm-native'
            }
            debug(MavenPublication) {
                from components.debug
                artifactId = 'strohm-native-debug'
            }
            publications.all {
                groupId = 'dev.strohmnative'
                version = "$strohm_native_version"
                pom {
                    name = 'Strohm Native Android'
                    description = 'Strohm Native library for Android'
                    url = 'https://strohmnative.dev'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'http://opensource.org/licenses/MIT'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/StrohmNative/strohm-native.git'
                        developerConnection = 'scm:git:ssh://github.com/StrohmNative/strohm-native.git'
                        url = 'https://github.com/StrohmNative/strohm-native'
                    }
                }
                artifact androidJavadocsJar
                artifact androidSourcesJar
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
                def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
    signing {
        // Set signing key using env var ORG_GRADLE_PROJECT_signingKey
        def signingKey = findProperty("signingKey")
        // Set signing password using env varORG_GRADLE_PROJECT_signingPassword
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)

        sign publishing.publications.release
        sign publishing.publications.debug
    }
}

